kind: pipeline
type: docker
name: unit tests

steps:
  - name: go vet and unit tests
    image: golang:1.17
    commands:
      - go vet ./...
      - go test -cover ./...
      - go build -o release/linux/amd64/lite-engine
    volumes:
      - name: cache
        path: /go
    depends_on:
      - clone
  - name: golangci-lint
    image: golangci/golangci-lint
    commands:
      - golangci-lint run --timeout 300s
    volumes:
      - name: cache
        path: /go
    depends_on:
      - clone

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
type: aws
name: ubuntu acceptance tests
 
pool:
  use: ubuntu

steps:
  - name: build
    image: golang:1.17
    commands:
      - go build -o lite-engine
  - name: server
    detach: true
    commands:
      - touch .env
      - echo "SERVER_HTTPS_BIND=localhost:9000" >> .env
      - echo "CLIENT_HTTPS_BIND=localhost:9000" >> .env
      - echo "SERVER_INSECURE=true" >> .env
      - echo "CLIENT_INSECURE=true" >> .env
      - echo "DEBUG=true" >> .env
      - echo "TRACE=true" >> .env
      - ./lite-engine server --env-file=".env"
    depends_on:
      - build
  - name: client
    commands:
      - sleep 5
      - cat .env
      - while ! curl -sf http://localhost:9000/healthz; do sleep 1; done
      - ./lite-engine client --env-file=".env"
    depends_on:
      - server

---
kind: pipeline
type: aws
name: osx acceptance tests

node:
  cluster: mac 
  
pool:
  use: osx

steps:
  - name: install_go
    commands:
      - brew install golang
      - go build -o lite-engine
  - name: server
    detach: true
    commands:
      - touch .env
      - echo "SERVER_HTTPS_BIND=localhost:9000" >> .env
      - echo "CLIENT_HTTPS_BIND=localhost:9000" >> .env
      - echo "SERVER_INSECURE=true" >> .env
      - echo "CLIENT_INSECURE=true" >> .env
      - echo "DEBUG=true" >> .env
      - echo "TRACE=true" >> .env
      - ./lite-engine server --env-file=".env"
    depends_on:
      - install_go
  - name: client
    commands:
      - sleep 5
      - cat .env
      - while ! curl -sf http://localhost:9000/healthz; do sleep 1; done
      - ./lite-engine client --env-file=".env"
    depends_on:
      - server
      
---
kind: pipeline
type: aws
name: arm64 ubuntu acceptance tests

pool:
  use: ubuntu_arm64

steps:
  - name: build
    image: golang:1.17
    commands:
      - go build -o lite-engine
  - name: server
    detach: true
    commands:
      - touch .env
      - echo "SERVER_HTTPS_BIND=localhost:9000" >> .env
      - echo "CLIENT_HTTPS_BIND=localhost:9000" >> .env
      - echo "SERVER_INSECURE=true" >> .env
      - echo "CLIENT_INSECURE=true" >> .env
      - echo "DEBUG=true" >> .env
      - echo "TRACE=true" >> .env
      - ./lite-engine server --env-file=".env"
    depends_on:
      - build
  - name: client
    commands:
      - sleep 5
      - cat .env
      - while ! curl -sf http://localhost:9000/healthz; do sleep 1; done
      - ./lite-engine client --env-file=".env"
    depends_on:
      - server

---
kind: pipeline
type: aws
name: windows acceptance tests
  
pool:
  use: windows

steps:
  - name: build
    image: golang:1.17
    commands:
      - go build -o lite-engine.exe
  - name: server
    detach: true
    commands:
      - echo "SERVER_HTTPS_BIND=localhost:9000" >> .env
      - echo "CLIENT_HTTPS_BIND=localhost:9000" >> .env
      - echo "SERVER_INSECURE=true" >> .env
      - echo "CLIENT_INSECURE=true" >> .env
      - echo "DEBUG=true" >> .env
      - echo "TRACE=true" >> .env
      - (Get-Content ".env") | Set-Content ".env"
      - .\lite-engine.exe server --env-file=".env"
    depends_on:
      - build
  - name: client
    commands:
      - sleep 10
      - cat .env
      - .\lite-engine.exe client --env-file=".env"
    depends_on:
      - server

---
kind: pipeline
type: docker
name: release artifacts

steps:
  - name: build
    image: golang:1.17
    commands:
      - GOOS=linux   GOARCH=amd64   go build -ldflags "-X main.version=${DRONE_TAG##v}" -o release/lite-engine-linux-amd64
      - GOOS=linux   GOARCH=arm64   go build -ldflags "-X main.version=${DRONE_TAG##v}" -o release/lite-engine-linux-arm64
      - GOOS=darwin  GOARCH=amd64   go build -ldflags "-X main.version=${DRONE_TAG##v}" -o release/lite-engine-darwin-amd64
      - GOOS=darwin  GOARCH=arm64   go build -ldflags "-X main.version=${DRONE_TAG##v}" -o release/lite-engine-darwin-arm64
      - GOOS=windows GOARCH=amd64   go build -ldflags "-X main.version=${DRONE_TAG##v}" -o release/lite-engine-windows-amd64.exe

  - name: release
    image: plugins/github-release
    settings:
      files:
        - release/lite-engine-linux-amd64
        - release/lite-engine-linux-arm64
        - release/lite-engine-darwin-amd64
        - release/lite-engine-darwin-arm64
        - release/lite-engine-windows-amd64.exe
      api_key:
        from_secret: github_token
trigger:
  event:
    - tag
